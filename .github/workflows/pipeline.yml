name: Main pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - 'apply'
          - 'destroy'

permissions:
  id-token: write
  contents: read

concurrency: 
  group: terraform-${{ github.event.repository.name }}
  cancel-in-progress: false

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: plan
    env:
      ARM_CLIENT_ID: "${{ vars.FABRIC_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      FABRIC_CLIENT_ID: "${{ vars.FABRIC_CLIENT_ID }}"
      FABRIC_CLIENT_SECRET: "${{ secrets.FABRIC_CLIENT_SECRET }}"
      FABRIC_TENANT_ID: "${{ vars.FABRIC_TENANT_ID }}"
      TF_VAR_FABRIC_CLIENT_ID: "${{ vars.FABRIC_CLIENT_ID }}"
      TF_VAR_FABRIC_TENANT_ID: "${{ vars.FABRIC_TENANT_ID }}"
      TF_VAR_FABRIC_CLIENT_SECRET: "${{ secrets.FABRIC_CLIENT_SECRET }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Setup TfLint
        uses: terraform-linters/setup-tflint@v4

      - name: Run TFLint
        run: tflint --chdir=tf/ -f compact

      - name: Terraform Format Check
        run: terraform -chdir=./tf fmt -recursive -check

      - name: Terraform Init
        run: terraform -chdir=./tf init -backend=false

      - name: Terraform Validate
        run: terraform -chdir=./tf validate

      - name: Terraform Init full 
        run: |
          terraform -chdir=./tf init \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Plan for ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          # shellcheck disable=SC2086
          TF_LOG=DEBUG terraform -chdir=./tf plan -out=tfplan -input=false ${{ inputs.terraform_action == 'destroy' && '-destroy' || '' }}


      - name: Create Module Artifact
        run: |
          $Directory = "staging"
          New-Item -Path . -Name $Directory -ItemType "directory"
          Copy-Item -Path "./*" -Exclude @(".git", ".terraform", ".github",  $Directory) -Recurse -Destination "./$Directory"
        working-directory: ./tf
        shell: pwsh

      - name: Publish Module Artifact
        uses: actions/upload-artifact@v4
        with:
          name: module
          path: ./tf/staging/

      - name: Show the Plan for Review
        run: terraform -chdir=./tf show tfplan
              
  terraform-apply:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')  
    runs-on: ubuntu-latest
    environment: apply
    needs: terraform-plan
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      FABRIC_USE_OIDC: true
      FABRIC_CLIENT_ID: "${{ vars.FABRIC_CLIENT_ID }}"
      FABRIC_TENANT_ID: "${{ vars.FABRIC_TENANT_ID }}"
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: module

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            -backend-config="resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform ${{ inputs.terraform_action == 'destroy' && 'Destroy' || 'Apply' }}
        run: |
          if [ "${{ inputs.terraform_action }}" == "destroy" ]; then
            terraform destroy -input=false -auto-approve
          else
            terraform apply -input=false -auto-approve
          fi